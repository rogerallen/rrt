Let's keep track of perf over time...

stats:cuda_ver,width,height,samples_per_pixel,blocks,tx,ty,render_time

5/1/2022 - on "gyre" RTX 3080, WSL2 system 
Found double-precision faster than single, but 1024x1 single-precision wins, finally.
-----------------------------------------------------------------------------------------
$ ./rrtd -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50d.png
stats:11050,1280,720,50,14651,8,8,9.00304
$ ./rrt -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11050,1280,720,50,14651,8,8,12.4506
$ ./rrt -s 50 -tx 16 -ty 16 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11050,1280,720,50,3726,16,16,11.1679
$ ./rrt -s 50 -tx 128 -ty 2 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11050,1280,720,50,3971,128,2,10.6953
$ ./rrt -s 50 -tx 256 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11050,1280,720,50,4326,256,1,9.69622
$ ./rrt -s 50 -tx 1024 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png 
stats:11050,1280,720,50,1442,1024,1,7.86074

5/1/2022 - on "rainbow" RTX 2070, Ubuntu Linux 20.04
Strangely double-precision is always the fastest!
LOL, I used float 16x16 for rendering animation and I could've gone ~3x faster!
-----------------------------------------------------------------------------------------
$ ./rrtd -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50d.png
stats:11060,1280,720,50,14651,8,8,13.6681
$ ./rrt -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11060,1280,720,50,14651,8,8,43.0986
$ ./rrt -s 50 -tx 16 -ty 16 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11060,1280,720,50,3726,16,16,38.3823
$ ./rrt -s 50 -tx 1024 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png 
stats:11060,1280,720,50,1442,1024,1,16.3396

5/3/2022 - on "gyre" RTX 3080, WSL2 system
before & after BVH
-----------------------------------------------------------------------------------------
$ rm -f scenes/finalo.png && time make scenes/finalo.png
stats:OpenMP,1200,800,10,4,n/a,n/a,22.5013
$ rm -f scenes/finalc.png && time make scenes/finalc.png
stats:SingleThread,1200,800,10,1,n/a,n/a,59.4418
---- after -----
$ rm -f scenes/finalo.png && time make scenes/finalo.png
stats:OpenMP,1200,800,10,4,n/a,n/a,8.17923
$ rm -f scenes/finalc.png && time make scenes/finalc.png
stats:SingleThread,1200,800,10,1,n/a,n/a,11.0918

5/1/2022 - on "rainbow" RTX 2070, Ubuntu Linux 20.04
BVH before & after
-----------------------------------------------------------------------------------------
$ rm -f scenes/finalo.png && time make scenes/finalo.png
stats:OpenMP,1200,800,10,12,n/a,n/a,10.6774
$ rm -f scenes/finalc.png && time make scenes/finalc.png
stats:SingleThread,1200,800,10,1,n/a,n/a,41.5973
---- after -----
$ rm -f scenes/finalo.png && time make scenes/finalo.png
stats:OpenMP,1200,800,10,12,n/a,n/a,4.3835
$ rm -f scenes/finalc.png && time make scenes/finalc.png
stats:SingleThread,1200,800,10,1,n/a,n/a,7.38456

5/8/2022 - on "rainbow" trying to track down apparent perf regression after adding BVH
-----------------------------------------------------------------------------------------
[on a rrt_test branch]
> git checkout add_gpu_bvh

> git log --oneline -n 10
8ab3859 (HEAD -> add_gpu_bvh, origin/add_gpu_bvh) bvh seems to work.
b1dfe9f (origin/main, origin/HEAD, main) adding bvh & still debugging
7680be4 better capture what this file is
fcadd63 clean up print()s
9a34c3f usage and parsing match up
3165e45 start bvh on gpu journey
7ed7c91 little cleanup
13dcd49 update rainbow perf
0df0f3d add BVH to C++ path
2a31c98 omp report max threads

git checkout 2a31c98 (few days ago, not so different than 5/1/2022)
> ./rrtd -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50d.png
stats:11060,1280,720,50,14651,8,8,13.8722
> ./rrt -s 50 -tx 1024 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png 
stats:11060,1280,720,50,1442,1024,1,15.5878

HEAD: (no bvh)  okay, this isn't so different
> ./rrtd -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50d.png -b 
stats:11060,1280,720,50,14651,8,8,13.6451
stats:11060,1280,720,50,14651,8,8,13.4751
> ./rrt -s 50 -tx 1024 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png -b
stats:11060,1280,720,50,1442,1024,1,19.9955
stats:11060,1280,720,50,1442,1024,1,14.0894

HEAD: (with bvh) okay, this is bad
> ./rrtd -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50d.png
stats:11060,1280,720,50,14651,8,8,31.8631
stats:11060,1280,720,50,14651,8,8,31.962
> ./rrt -s 50 -tx 1024 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11060,1280,720,50,1442,1024,1,25.1794
stats:11060,1280,720,50,1442,1024,1,25.7471

Scene for running nsight on...
> ./rrt -s 20 -tx 640 -ty 1 -w 640 -h 480 -i scenes/test2.txt -o scenes/test2.png -b
stats:11060,640,480,20,962,640,1,0.239689
> ./rrt -s 20 -tx 640 -ty 1 -w 640 -h 480 -i scenes/test2.txt -o scenes/test2.png 
stats:11060,640,480,20,962,640,1,0.715616

(had to reduce to 320 for "detailed" bvh)

5/8/2022 - on "gyre" any perf regression?
-----------------------------------------------------------------------------------------
HEAD: (no bvh)  this is a pretty big regression from 5/1 (was 9s & 8s, respectively)
> ./rrtd -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50d.png -b 
stats:11050,1280,720,50,14651,8,8,19.2266
stats:11050,1280,720,50,14651,8,8,17.1748
> ./rrt -s 50 -tx 1024 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png -b
stats:11050,1280,720,50,1442,1024,1,13.6871
stats:11050,1280,720,50,1442,1024,1,13.0145

HEAD: (with bvh) big improvement with single-precision.  Double, not so much.
$ ./rrtd -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50d.png 
stats:11050,1280,720,50,14651,8,8,16.0291
stats:11050,1280,720,50,14651,8,8,16.3759
$ ./rrt -s 50 -tx 1024 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11050,1280,720,50,1442,1024,1,7.28716
stats:11050,1280,720,50,1442,1024,1,7.00725

In short, perf is all kray-kray!  Need to investigate further.

5/9/2022 - on "rainbow" 
-----------------------------------------------------------------------------------------
Wow, unrolling the loop in aabb.h hit() helped considerably (-10s & -5s!)
> ./rrtd -s 50 -tx 8 -ty 8 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50d.png 
stats:11060,1280,720,50,14651,8,8,20.5649
stats:11060,1280,720,50,14651,8,8,20.3974

stats:11060,1280,720,50,14651,8,8,27.5419  tried to move loads up high.  Bad idea.
stats:11060,1280,720,50,14651,8,8,28.1274

stats:11060,1280,720,50,14651,8,8,19.5171  reverted

> ./rrt -s 50 -tx 1024 -ty 1 -w 1280 -h 720 -i scenes/final.txt -o scenes/final_s50.png
stats:11060,1280,720,50,1442,1024,1,20.4815
stats:11060,1280,720,50,1442,1024,1,20.7204

stats:11060,1280,720,50,1442,1024,1,21.8221 tried to move loads up high.  Bad idea.
stats:11060,1280,720,50,1442,1024,1,22.5833

stats:11060,1280,720,50,1442,1024,1,17.3111 reverted (wow!)